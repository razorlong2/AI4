#!/usr/bin/env python3
# coding: utf-8
"""
EpiMind AI - IAAM Predictor ULTRA ENHANCED - Versiunea FinalƒÉ
UMF "Grigore T. Popa" Ia»ôi
Version: 5.0.0 - Ultra Fluid & Modern Medical AI

√éMBUNƒÇTƒÇ»öIRI MAJORE V5.0:
- Chat ultra-fluid cu anima»õii »ôi feedback real-time
- Extrac»õie √ÆmbunƒÉtƒÉ»õitƒÉ pentru "internat de X ore/zile"
- AI conversa»õional mult mai inteligent
- Interfa»õƒÉ modernƒÉ cu tema dark elegantƒÉ
- Validare √Æn timp real »ôi auto-completare
- Export rezultate PDF/JSON profesional
- Sistem de notificƒÉri »ôi alerte medicale
- OptimizƒÉri de performan»õƒÉ »ôi stabilitate

Instalare rapidƒÉ:
    pip install streamlit pandas plotly requests python-dateutil reportlab

RuleazƒÉ:
    streamlit run epimind_ai_ultra_enhanced.py
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import json
import re
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Any, Optional
import requests
import time
import hashlib
import base64
from dataclasses import dataclass, asdict
import logging
from io import BytesIO

# Configurare logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configurare aplica»õie
st.set_page_config(
    page_title="EpiMind AI - IAAM Predictor Ultra", 
    page_icon="ü§ñ", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS Ultra Modern »ôi Fluid
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap');
    
    :root {
        --bg-primary: #0a0e1a;
        --bg-secondary: #1a1f2e;
        --bg-chat: #242936;
        --bg-card: #2d3748;
        --text-primary: #ffffff;
        --text-secondary: #a0aec0;
        --text-muted: #718096;
        --accent-blue: #00d4ff;
        --accent-green: #00ff88;
        --accent-red: #ff4757;
        --accent-orange: #ffa726;
        --accent-purple: #9f7aea;
        --border-color: #4a5568;
        --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.15);
        --shadow-md: 0 4px 20px rgba(0, 0, 0, 0.25);
        --shadow-lg: 0 8px 40px rgba(0, 0, 0, 0.35);
        --gradient-primary: linear-gradient(135deg, var(--accent-blue), var(--accent-green));
        --gradient-secondary: linear-gradient(135deg, var(--accent-purple), var(--accent-blue));
    }
    
    * {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    .main-header {
        background: var(--gradient-primary);
        padding: 3rem 2rem;
        border-radius: 20px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
        box-shadow: var(--shadow-lg);
        position: relative;
        overflow: hidden;
    }
    
    .main-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
        opacity: 0.3;
    }
    
    .main-header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        position: relative;
        z-index: 1;
    }
    
    .chat-container {
        background: var(--bg-chat);
        border-radius: 20px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        max-height: 650px;
        overflow-y: auto;
        box-shadow: var(--shadow-md);
        border: 1px solid var(--border-color);
        position: relative;
    }
    
    .chat-container::-webkit-scrollbar {
        width: 8px;
    }
    
    .chat-container::-webkit-scrollbar-track {
        background: var(--bg-secondary);
        border-radius: 4px;
    }
    
    .chat-container::-webkit-scrollbar-thumb {
        background: var(--accent-blue);
        border-radius: 4px;
    }
    
    .message {
        margin-bottom: 1.5rem;
        padding: 1.5rem;
        border-radius: 15px;
        animation: slideInUp 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        position: relative;
        backdrop-filter: blur(10px);
    }
    
    .user-message {
        background: var(--gradient-secondary);
        color: white;
        margin-left: 3rem;
        box-shadow: var(--shadow-sm);
    }
    
    .ai-message {
        background: var(--bg-card);
        color: var(--text-primary);
        border-left: 4px solid var(--accent-blue);
        margin-right: 3rem;
        box-shadow: var(--shadow-sm);
    }
    
    .system-message {
        background: var(--accent-green);
        color: white;
        text-align: center;
        font-weight: 500;
        box-shadow: var(--shadow-sm);
    }
    
    .typing-indicator {
        display: flex;
        align-items: center;
        padding: 1rem 1.5rem;
        background: var(--bg-card);
        border-radius: 15px;
        margin-right: 3rem;
        margin-bottom: 1rem;
        border-left: 4px solid var(--accent-orange);
        animation: pulse 1.5s infinite;
    }
    
    .typing-dots {
        display: flex;
        gap: 4px;
        margin-left: 10px;
    }
    
    .typing-dots span {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: var(--accent-orange);
        animation: bounce 1.4s infinite ease-in-out both;
    }
    
    .typing-dots span:nth-child(1) { animation-delay: -0.32s; }
    .typing-dots span:nth-child(2) { animation-delay: -0.16s; }
    
    .risk-critical {
        background: linear-gradient(135deg, #ff4757, #c44569);
        color: white;
        padding: 2.5rem;
        border-radius: 20px;
        text-align: center;
        margin: 1.5rem 0;
        box-shadow: var(--shadow-lg);
        animation: criticalPulse 2s infinite;
        border: 2px solid rgba(255, 71, 87, 0.3);
    }
    
    .risk-high {
        background: linear-gradient(135deg, #ffa726, #ff7043);
        color: white;
        padding: 2.5rem;
        border-radius: 20px;
        text-align: center;
        margin: 1.5rem 0;
        box-shadow: var(--shadow-md);
        border: 2px solid rgba(255, 167, 38, 0.3);
    }
    
    .risk-moderate {
        background: linear-gradient(135deg, #42a5f5, #478ed1);
        color: white;
        padding: 2.5rem;
        border-radius: 20px;
        text-align: center;
        margin: 1.5rem 0;
        box-shadow: var(--shadow-md);
        border: 2px solid rgba(66, 165, 245, 0.3);
    }
    
    .risk-low {
        background: linear-gradient(135deg, #66bb6a, #43a047);
        color: white;
        padding: 2.5rem;
        border-radius: 20px;
        text-align: center;
        margin: 1.5rem 0;
        box-shadow: var(--shadow-md);
        border: 2px solid rgba(102, 187, 106, 0.3);
    }
    
    .data-card {
        background: var(--bg-card);
        border-radius: 15px;
        padding: 2rem;
        margin: 1.5rem 0;
        border: 1px solid var(--border-color);
        box-shadow: var(--shadow-sm);
        transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }
    
    .data-card:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
        border-color: var(--accent-blue);
    }
    
    .metric-card {
        background: var(--bg-chat);
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        border: 1px solid var(--border-color);
        transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        position: relative;
        overflow: hidden;
    }
    
    .metric-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 2px;
        background: var(--gradient-primary);
        transition: left 0.3s ease;
    }
    
    .metric-card:hover::before {
        left: 0;
    }
    
    .metric-card:hover {
        transform: translateY(-3px);
        box-shadow: var(--shadow-md);
        border-color: var(--accent-blue);
    }
    
    .progress-bar {
        width: 100%;
        height: 8px;
        background: var(--bg-secondary);
        border-radius: 4px;
        overflow: hidden;
        margin: 1rem 0;
    }
    
    .progress-fill {
        height: 100%;
        background: var(--gradient-primary);
        border-radius: 4px;
        transition: width 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }
    
    .status-online {
        color: var(--accent-green);
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .status-online::before {
        content: '‚óè';
        animation: pulse 2s infinite;
    }
    
    .status-offline {
        color: var(--accent-red);
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .status-offline::before {
        content: '‚óè';
    }
    
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--bg-card);
        color: var(--text-primary);
        padding: 1rem 1.5rem;
        border-radius: 10px;
        box-shadow: var(--shadow-lg);
        border-left: 4px solid var(--accent-green);
        z-index: 1000;
        animation: slideInRight 0.3s ease;
    }
    
    @keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(100px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes bounce {
        0%, 80%, 100% {
            transform: scale(0);
        } 40% {
            transform: scale(1);
        }
    }
    
    @keyframes pulse {
        0% {
            opacity: 1;
        }
        50% {
            opacity: 0.5;
        }
        100% {
            opacity: 1;
        }
    }
    
    @keyframes criticalPulse {
        0% {
            box-shadow: 0 0 0 0 rgba(255, 71, 87, 0.7);
        }
        70% {
            box-shadow: 0 0 0 15px rgba(255, 71, 87, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(255, 71, 87, 0);
        }
    }
    
    .stButton > button {
        background: var(--gradient-primary);
        color: white;
        border: none;
        border-radius: 12px;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        font-size: 0.95rem;
        transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        box-shadow: var(--shadow-sm);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
        background: var(--gradient-secondary);
    }
    
    .stTextArea > div > div > textarea {
        background-color: var(--bg-card);
        border: 2px solid var(--border-color);
        color: var(--text-primary);
        border-radius: 12px;
        font-size: 1rem;
        line-height: 1.5;
        transition: all 0.3s ease;
    }
    
    .stTextArea > div > div > textarea:focus {
        border-color: var(--accent-blue);
        box-shadow: 0 0 0 3px rgba(0, 212, 255, 0.1);
    }
    
    .data-extraction-success {
        background: rgba(0, 255, 136, 0.1);
        border: 1px solid var(--accent-green);
        border-radius: 8px;
        padding: 0.5rem 1rem;
        margin: 0.5rem 0;
        color: var(--accent-green);
        font-weight: 500;
        animation: slideInUp 0.3s ease;
    }
    
    .completion-indicator {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 1rem;
        background: var(--bg-card);
        border-radius: 10px;
        margin: 1rem 0;
    }
    
    .completion-circle {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        transition: all 0.3s ease;
    }
    
    .completion-circle.complete {
        background: var(--accent-green);
        box-shadow: 0 0 10px rgba(0, 255, 136, 0.5);
    }
    
    .completion-circle.incomplete {
        background: var(--text-muted);
    }
</style>
""", unsafe_allow_html=True)

@dataclass
class PatientData:
    """StructurƒÉ √ÆmbunƒÉtƒÉ»õitƒÉ de date pentru pacient"""
    # Identificare
    patient_id: str = ""
    timestamp: datetime = None
    
    # Date temporale - √éMBUNƒÇTƒÇ»öIT pentru "internat de X ore"
    ore_spitalizare: float = 0
    
    # Dispozitive invazive
    cateter_central: bool = False
    cateter_central_days: int = 0
    ventilatie_mecanica: bool = False
    ventilatie_mecanica_days: int = 0
    sonda_urinara: bool = False
    sonda_urinara_days: int = 0
    traheostomie: bool = False
    traheostomie_days: int = 0
    drenaj: bool = False
    drenaj_days: int = 0
    peg: bool = False
    peg_days: int = 0
    
    # Parametri vitali
    temperatura: float = 36.5
    frecventa_cardiaca: int = 80
    tas: int = 120
    tad: int = 80
    frecventa_respiratorie: int = 16
    glasgow: int = 15
    
    # Analize laborator
    leucocite: float = 7.0
    crp: float = 5.0
    procalcitonina: float = 0.1
    creatinina: float = 1.0
    bilirubina: float = 1.0
    trombocite: float = 250.0
    pao2_fio2: float = 400.0
    
    # Microbiologie
    cultura_pozitiva: bool = False
    bacterie: str = ""
    rezistente: List[str] = None
    
    # Scoruri calculate
    sofa_score: int = 0
    qsofa_score: int = 0
    
    def __post_init__(self):
        if self.rezistente is None:
            self.rezistente = []
        if self.timestamp is None:
            self.timestamp = datetime.now()

class UltraEnhancedMedicalDataExtractor:
    """Extractor ultra-√ÆmbunƒÉtƒÉ»õit pentru "internat de X ore/zile" »ôi alte date medicale"""
    
    def __init__(self):
        # √éMBUNƒÇTƒÇ»öIT: Patterns specifice pentru "internat de X ore/zile"
        self.patterns = {
            "ore_spitalizare": [
                # Patterns noi pentru "internat de X ore/zile"
                r"internat\s+de\s+(\d+)\s+(?:ore|hours?|h)\b",
                r"internat\s+de\s+(\d+)\s+(?:zile|days?|d)\b",
                r"internare\s+de\s+(\d+)\s+(?:ore|hours?|h)\b", 
                r"internare\s+de\s+(\d+)\s+(?:zile|days?|d)\b",
                r"spitalizat\s+de\s+(\d+)\s+(?:ore|hours?|h)\b",
                r"spitalizat\s+de\s+(\d+)\s+(?:zile|days?|d)\b",
                r"hospitalizat\s+de\s+(\d+)\s+(?:ore|hours?|h)\b",
                r"hospitalizat\s+de\s+(\d+)\s+(?:zile|days?|d)\b",
                
                # Patterns existente √ÆmbunƒÉtƒÉ»õite
                r"(?:internare|spitalizare|hospitalizare)[\s:]*(\d+)\s*(?:ore|hours?|h)\b",
                r"(\d+)\s*(?:ore|hours?|h).*(?:internare|spitalizare|hospitalizare)",
                r"(\d+)\s*(?:zile|days?|d).*(?:internare|spitalizare|hospitalizare)",
                r"ziua\s*(\d+)(?:\s+de\s+(?:internare|spitalizare))?",
                r"de\s*(\d+)\s*(?:zile|days?|d)(?:\s+de\s+(?:internare|spitalizare))?",
                r"(\d+)\s*(?:days?|zile).*(?:hospital|admission|internare)",
                r"length\s*of\s*stay[\s:]*(\d+)\s*(?:days?|zile|ore|hours?)",
                r"los[\s:]*(\d+)\s*(?:days?|zile|ore|hours?)",
                r"admission[\s:]*(\d+)\s*(?:days?|hours?|zile|ore)\s*ago",
                
                # Patterns pentru contexte mai complexe
                r"pacientul\s+(?:este\s+)?internat\s+de\s+(\d+)\s+(?:ore|zile|hours?|days?)",
                r"de\s+(\d+)\s+(?:ore|zile)\s+(?:este\s+)?(?:internat|spitalizat|hospitalizat)",
                r"(\d+)\s+(?:ore|zile)\s+de\s+(?:la\s+)?(?:internare|spitalizare|admisie)",
            ],
            
            # Patterns √ÆmbunƒÉtƒÉ»õite pentru alte valori
            "leucocite": [
                r"(?:leucocite|wbc|gb|white\s+blood\s+cells?)[\s:=]*(\d+(?:[.,]\d+)?)",
                r"(\d+(?:[.,]\d+)?)\s*(?:x\s*)?10\^?[39].*(?:leucocite|wbc|gb)",
                r"leucocite[\s:=]*(\d+(?:[.,]\d+)?)\s*(?:x\s*10\^?[39]|mii|k|thousand)?",
                r"wbc[\s:=]*(\d+(?:[.,]\d+)?)",
                r"gb[\s:=]*(\d+(?:[.,]\d+)?)"
            ],
            
            "crp": [
                r"(?:crp|c[\s-]?reactive[\s-]?protein)[\s:=]*(\d+(?:[.,]\d+)?)",
                r"proteina\s+c\s+reactiva[\s:=]*(\d+(?:[.,]\d+)?)",
                r"pcr[\s:=]*(\d+(?:[.,]\d+)?)"
            ],
            
            "procalcitonina": [
                r"(?:procalcitonina|pct|procalcitonin)[\s:=]*(\d+(?:[.,]\d+)?)",
                r"procalcitonin[\s:=]*(\d+(?:[.,]\d+)?)"
            ],
            
            "temperatura": [
                r"(?:temperatura|temp|t|febra)[\s:=]*(\d+(?:[.,]\d+)?)\s*¬∞?c?",
                r"(\d+(?:[.,]\d+)?)\s*¬∞c",
                r"temperature[\s:=]*(\d+(?:[.,]\d+)?)",
                r"fever[\s:=]*(\d+(?:[.,]\d+)?)"
            ],
            
            "frecventa_cardiaca": [
                r"(?:puls|fc|hr|frecventa\s+cardiaca|heart\s+rate)[\s:=]*(\d+)",
                r"(\d+)\s*bpm",
                r"pulse[\s:=]*(\d+)"
            ],
            
            "tas": [
                r"(?:ta|tensiune|pas|systolic|blood\s+pressure)[\s:=]*(\d+)(?:/\d+)?",
                r"(\d+)/\d+\s*mmhg",
                r"systolic[\s:=]*(\d+)",
                r"bp[\s:=]*(\d+)/\d+"
            ],
            
            "tad": [
                r"(?:ta|tensiune|pad|diastolic)[\s:=]*\d+/(\d+)",
                r"\d+/(\d+)\s*mmhg",
                r"diastolic[\s:=]*(\d+)",
                r"bp[\s:=]*\d+/(\d+)"
            ]
        }
        
        # Patterns pentru bacterii (√ÆmbunƒÉtƒÉ»õite)
        self.bacteria_patterns = [
            (r"escherichia\s+coli|e\.?\s*coli", "Escherichia coli"),
            (r"klebsiella\s+pneumoniae|k\.?\s*pneumoniae", "Klebsiella pneumoniae"),
            (r"pseudomonas\s+aeruginosa|p\.?\s*aeruginosa", "Pseudomonas aeruginosa"),
            (r"staphylococcus\s+aureus|s\.?\s*aureus|staph\s+aureus", "Staphylococcus aureus"),
            (r"acinetobacter\s+baumannii|a\.?\s*baumannii", "Acinetobacter baumannii"),
            (r"enterococcus\s+faecium|e\.?\s*faecium", "Enterococcus faecium"),
            (r"candida\s+auris|c\.?\s*auris", "Candida auris"),
            (r"clostridioides\s+difficile|c\.?\s*difficile|cdiff", "Clostridioides difficile"),
            (r"enterobacter\s+cloacae", "Enterobacter cloacae"),
            (r"serratia\s+marcescens", "Serratia marcescens")
        ]
        
        # Patterns pentru rezisten»õe (√ÆmbunƒÉtƒÉ»õite)
        self.resistance_patterns = [
            (r"esbl\+?|extended[\s-]?spectrum", "ESBL"),
            (r"mrsa|methicillin[\s-]?resistant", "MRSA"),
            (r"vre|vancomycin[\s-]?resistant", "VRE"),
            (r"cre|carbapenem[\s-]?resistant", "CRE"),
            (r"kpc|klebsiella[\s-]?pneumoniae[\s-]?carbapenemase", "KPC"),
            (r"ndm|new[\s-]?delhi[\s-]?metallo", "NDM"),
            (r"oxa|oxacillinase", "OXA"),
            (r"vim|verona[\s-]?integron", "VIM"),
            (r"imp|imipenemase", "IMP"),
            (r"xdr|extensively[\s-]?drug[\s-]?resistant", "XDR"),
            (r"pdr|pandrug[\s-]?resistant", "PDR")
        ]
        
        # Keywords pentru dispozitive (√ÆmbunƒÉtƒÉ»õite)
        self.device_keywords = {
            "cateter_central": [
                "cateter central", "cvc", "cateter venos central", 
                "central line", "hickman", "port", "picc", "central venous"
            ],
            "ventilatie_mecanica": [
                "ventilatie", "intubat", "respirator", "ventilator",
                "mechanical ventilation", "cpap", "bipap", "intubation"
            ],
            "sonda_urinara": [
                "sonda urinara", "cateter urinar", "foley",
                "urinary catheter", "bladder catheter", "sonda vezicala"
            ],
            "traheostomie": [
                "traheostomie", "canula", "tracheostomy",
                "tracheal tube", "canula traheala"
            ],
            "drenaj": [
                "dren", "drenaj", "drain", "chest tube",
                "dren toracic", "dren abdominal", "drainage"
            ],
            "peg": [
                "peg", "gastrostomie", "gastrostomy",
                "feeding tube", "sonda gastrica", "percutaneous endoscopic"
            ]
        }
    
    def extract_from_text(self, text: str) -> Dict:
        """Extrage date medicale cu algoritm ultra-√ÆmbunƒÉtƒÉ»õit"""
        text_lower = text.lower().strip()
        extracted = {}
        
        # Log pentru debugging
        logger.info(f"Extracting from text: {text_lower[:100]}...")
        
        # Extrage valori numerice cu validare √ÆmbunƒÉtƒÉ»õitƒÉ
        for key, patterns in self.patterns.items():
            for pattern in patterns:
                matches = re.finditer(pattern, text_lower, re.IGNORECASE)
                for match in matches:
                    try:
                        value_str = match.group(1).replace(',', '.')
                        value = float(value_str)
                        
                        # ValidƒÉri specifice »ôi conversii
                        if key == "ore_spitalizare":
                            # DetecteazƒÉ dacƒÉ este √Æn zile »ôi converte»ôte
                            pattern_text = match.group(0)
                            if any(word in pattern_text for word in ["zile", "days", "ziua"]):
                                if "ziua" in pattern_text:
                                    # "ziua 5" √ÆnseamnƒÉ 5*24 ore
                                    value = value * 24
                                else:
                                    # "de 5 zile" √ÆnseamnƒÉ 5*24 ore
                                    value = value * 24
                            
                            # Validare rezonabilƒÉ pentru ore spitalizare
                            if 0 <= value <= 8760:  # maxim 1 an √Æn ore
                                extracted[key] = value
                                logger.info(f"Extracted {key}: {value} ore")
                                break
                        
                        elif key == "leucocite":
                            # Validare pentru leucocite (1-100 normal, >100 probabil √Æn mii)
                            if value > 100:
                                value = value / 1000  # converte»ôte din /ŒºL √Æn x10¬≥/ŒºL
                            if 0.1 <= value <= 100:
                                extracted[key] = value
                                logger.info(f"Extracted {key}: {value}")
                                break
                        
                        elif key == "crp":
                            # Validare pentru CRP (0-300 mg/L normal)
                            if 0 <= value <= 500:
                                extracted[key] = value
                                logger.info(f"Extracted {key}: {value}")
                                break
                        
                        elif key == "procalcitonina":
                            # Validare pentru PCT (0-100 ng/mL)
                            if 0 <= value <= 100:
                                extracted[key] = value
                                logger.info(f"Extracted {key}: {value}")
                                break
                        
                        elif key == "temperatura":
                            # Validare pentru temperaturƒÉ (30-45¬∞C)
                            if 30 <= value <= 45:
                                extracted[key] = value
                                logger.info(f"Extracted {key}: {value}")
                                break
                        
                        elif key in ["frecventa_cardiaca", "tas", "tad"]:
                            # Validare pentru parametri vitali
                            if key == "frecventa_cardiaca" and 30 <= value <= 250:
                                extracted[key] = int(value)
                                logger.info(f"Extracted {key}: {value}")
                                break
                            elif key == "tas" and 50 <= value <= 300:
                                extracted[key] = int(value)
                                logger.info(f"Extracted {key}: {value}")
                                break
                            elif key == "tad" and 30 <= value <= 200:
                                extracted[key] = int(value)
                                logger.info(f"Extracted {key}: {value}")
                                break
                        
                        else:
                            # Pentru alte valori, validare generalƒÉ
                            if value >= 0:
                                extracted[key] = value
                                logger.info(f"Extracted {key}: {value}")
                                break
                    
                    except (ValueError, IndexError) as e:
                        logger.warning(f"Error extracting {key} from {match.group(0)}: {e}")
                        continue
        
        # Extrage bacterii
        for pattern, bacterie in self.bacteria_patterns:
            if re.search(pattern, text_lower, re.IGNORECASE):
                extracted["bacterie"] = bacterie
                extracted["cultura_pozitiva"] = True
                logger.info(f"Extracted bacterie: {bacterie}")
                break
        
        # Extrage rezisten»õe
        rezistente = []
        for pattern, rezistenta in self.resistance_patterns:
            if re.search(pattern, text_lower, re.IGNORECASE):
                rezistente.append(rezistenta)
                logger.info(f"Extracted rezistenta: {rezistenta}")
        
        if rezistente:
            extracted["rezistente"] = rezistente
        
        # Extrage dispozitive cu durata
        for device, keywords in self.device_keywords.items():
            for keyword in keywords:
                if keyword in text_lower:
                    extracted[device] = True
                    logger.info(f"Extracted device: {device}")
                    
                    # √éncearcƒÉ sƒÉ gƒÉseascƒÉ durata dispozitivului
                    duration_patterns = [
                        rf"{re.escape(keyword)}.*?(\d+)\s*(?:zile|days?|d)\b",
                        rf"(\d+)\s*(?:zile|days?|d).*?{re.escape(keyword)}",
                        rf"{re.escape(keyword)}.*?de\s*(\d+)\s*(?:zile|days?)",
                        rf"de\s*(\d+)\s*(?:zile|days?).*?{re.escape(keyword)}"
                    ]
                    
                    for duration_pattern in duration_patterns:
                        duration_match = re.search(duration_pattern, text_lower, re.IGNORECASE)
                        if duration_match:
                            try:
                                days = int(duration_match.group(1))
                                if 0 <= days <= 365:  # validare rezonabilƒÉ
                                    extracted[f"{device}_days"] = days
                                    logger.info(f"Extracted {device}_days: {days}")
                                    break
                            except ValueError:
                                continue
                    break
        
        logger.info(f"Total extracted data: {extracted}")
        return extracted
    
    def validate_extracted_data(self, data: Dict) -> Dict:
        """ValideazƒÉ »ôi curƒÉ»õƒÉ datele extrase"""
        validated = {}
        
        for key, value in data.items():
            try:
                if key == "ore_spitalizare":
                    if isinstance(value, (int, float)) and 0 <= value <= 8760:
                        validated[key] = float(value)
                
                elif key in ["leucocite", "crp", "procalcitonina", "temperatura", "creatinina", "bilirubina", "trombocite"]:
                    if isinstance(value, (int, float)) and value >= 0:
                        validated[key] = float(value)
                
                elif key in ["frecventa_cardiaca", "tas", "tad", "frecventa_respiratorie", "glasgow"]:
                    if isinstance(value, (int, float)) and value >= 0:
                        validated[key] = int(value)
                
                elif key in ["cateter_central", "ventilatie_mecanica", "sonda_urinara", "traheostomie", "drenaj", "peg", "cultura_pozitiva"]:
                    validated[key] = bool(value)
                
                elif key.endswith("_days"):
                    if isinstance(value, (int, float)) and 0 <= value <= 365:
                        validated[key] = int(value)
                
                elif key in ["bacterie"]:
                    if isinstance(value, str) and value.strip():
                        validated[key] = value.strip()
                
                elif key == "rezistente":
                    if isinstance(value, list):
                        validated[key] = [r for r in value if isinstance(r, str) and r.strip()]
                
            except (ValueError, TypeError) as e:
                logger.warning(f"Validation error for {key}={value}: {e}")
                continue
        
        return validated


class UltraFluidChatInterface:
    """Interfa»õƒÉ chat ultra-fluidƒÉ »ôi modernƒÉ"""
    
    def __init__(self):
        self.ai = EnhancedOllamaAI()
        self.predictor = EnhancedIAAMPredictor()
        self.extractor = UltraEnhancedMedicalDataExtractor()  # Folose»ôte extractorul √ÆmbunƒÉtƒÉ»õit
        
        # Initialize session state
        self._init_session_state()
    
    def _init_session_state(self):
        """Ini»õializeazƒÉ session state cu func»õii √ÆmbunƒÉtƒÉ»õite"""
        if "messages" not in st.session_state:
            st.session_state.messages = []
        if "patient_data" not in st.session_state:
            st.session_state.patient_data = PatientData()
        if "chat_history" not in st.session_state:
            st.session_state.chat_history = []
        if "current_patient_id" not in st.session_state:
            st.session_state.current_patient_id = None
        if "ai_status" not in st.session_state:
            st.session_state.ai_status = self.ai.available
        if "typing_indicator" not in st.session_state:
            st.session_state.typing_indicator = False
        if "last_extraction" not in st.session_state:
            st.session_state.last_extraction = {}
        if "data_completion_progress" not in st.session_state:
            st.session_state.data_completion_progress = 0
    
    def show_typing_indicator(self):
        """Afi»ôeazƒÉ indicator de typing pentru fluiditate"""
        if st.session_state.typing_indicator:
            st.markdown("""
            <div class="typing-indicator">
                <strong>ü§ñ EpiMind AI scrie</strong>
                <div class="typing-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    def show_data_extraction_feedback(self, extracted_data: Dict):
        """Afi»ôeazƒÉ feedback vizual pentru datele extrase"""
        if extracted_data:
            feedback_items = []
            for key, value in extracted_data.items():
                if key == "ore_spitalizare":
                    zile = value / 24
                    feedback_items.append(f"‚è∞ Spitalizare: {value} ore ({zile:.1f} zile)")
                elif key == "leucocite":
                    feedback_items.append(f"üß™ Leucocite: {value} x10¬≥/ŒºL")
                elif key == "crp":
                    feedback_items.append(f"üß™ CRP: {value} mg/L")
                elif key == "procalcitonina":
                    feedback_items.append(f"üß™ PCT: {value} ng/mL")
                elif key == "temperatura":
                    feedback_items.append(f"üå°Ô∏è TemperaturƒÉ: {value}¬∞C")
                elif key == "bacterie":
                    feedback_items.append(f"ü¶† Bacterie: {value}")
                elif key.endswith("_days") and value > 0:
                    device_name = key.replace("_days", "").replace("_", " ")
                    feedback_items.append(f"üîß {device_name}: {value} zile")
                elif key in ["cateter_central", "ventilatie_mecanica", "sonda_urinara"] and value:
                    device_name = key.replace("_", " ")
                    feedback_items.append(f"üîß {device_name}")
            
            if feedback_items:
                feedback_html = "<br>".join(feedback_items)
                st.markdown(f"""
                <div class="data-extraction-success">
                    <strong>‚úÖ Date extrase automat:</strong><br>
                    {feedback_html}
                </div>
                """, unsafe_allow_html=True)
    
    def calculate_completion_progress(self) -> float:
        """CalculeazƒÉ progresul completƒÉrii datelor"""
        data = st.session_state.patient_data
        total_fields = 8  # c√¢mpuri esen»õiale
        completed_fields = 0
        
        # VerificƒÉ c√¢mpurile esen»õiale
        if data.ore_spitalizare > 0:
            completed_fields += 1
        if any([data.cateter_central, data.ventilatie_mecanica, data.sonda_urinara]):
            completed_fields += 1
        if data.leucocite != 7.0:
            completed_fields += 1
        if data.crp != 5.0:
            completed_fields += 1
        if data.procalcitonina != 0.1:
            completed_fields += 1
        if data.temperatura != 36.5:
            completed_fields += 1
        if data.frecventa_cardiaca != 80:
            completed_fields += 1
        if data.tas != 120 or data.tad != 80:
            completed_fields += 1
        
        progress = (completed_fields / total_fields) * 100
        st.session_state.data_completion_progress = progress
        return progress
    
    def show_completion_indicator(self):
        """Afi»ôeazƒÉ indicatorul de progres"""
        progress = self.calculate_completion_progress()
        
        st.markdown(f"""
        <div class="completion-indicator">
            <strong>üìä Progres colectare date: {progress:.0f}%</strong>
            <div class="progress-bar">
                <div class="progress-fill" style="width: {progress}%"></div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Afi»ôeazƒÉ indicatori pentru fiecare categorie
        data = st.session_state.patient_data
        categories = [
            ("‚è∞ Timp spitalizare", data.ore_spitalizare > 0),
            ("üîß Dispozitive invazive", any([data.cateter_central, data.ventilatie_mecanica, data.sonda_urinara])),
            ("üß™ Analize laborator", any([data.leucocite != 7.0, data.crp != 5.0, data.procalcitonina != 0.1])),
            ("üíì Parametri vitali", any([data.temperatura != 36.5, data.frecventa_cardiaca != 80])),
            ("ü¶† Microbiologie", data.cultura_pozitiva),
        ]
        
        indicators_html = ""
        for category, completed in categories:
            circle_class = "complete" if completed else "incomplete"
            indicators_html += f"""
            <div style="display: flex; align-items: center; gap: 10px; margin: 5px 0;">
                <div class="completion-circle {circle_class}"></div>
                <span style="color: {'var(--accent-green)' if completed else 'var(--text-muted)'};">{category}</span>
            </div>
            """
        
        st.markdown(f"""
        <div class="data-card">
            <h4>üìã Status colectare date</h4>
            {indicators_html}
        </div>
        """, unsafe_allow_html=True)
    
    def process_user_input(self, user_input: str) -> str:
        """ProceseazƒÉ input-ul cu feedback vizual √ÆmbunƒÉtƒÉ»õit"""
        
        # ActiveazƒÉ typing indicator
        st.session_state.typing_indicator = True
        
        # Extrage »ôi valideazƒÉ date medicale
        extracted_data = self.extractor.extract_from_text(user_input)
        validated_data = self.extractor.validate_extracted_data(extracted_data)
        
        # SalveazƒÉ ultima extrac»õie pentru feedback
        st.session_state.last_extraction = validated_data
        
        # ActualizeazƒÉ datele pacientului
        if validated_data:
            current_data = asdict(st.session_state.patient_data)
            current_data.update(validated_data)
            
            # RecreeazƒÉ obiectul PatientData
            st.session_state.patient_data = PatientData(**{
                k: v for k, v in current_data.items() 
                if k in PatientData.__dataclass_fields__
            })
        
        # PregƒÉte»ôte context pentru AI
        data_summary = self._format_current_data()
        completion_status = self._assess_data_completion()
        
        # GenereazƒÉ prompt pentru AI
        ai_prompt = f"""
        Utilizatorul a spus: "{user_input}"
        
        Date colectate:
        {data_summary}
        
        Status completare: {completion_status}
        
        ContinuƒÉ conversa»õia pentru a colecta datele lipsƒÉ sau sugereazƒÉ calcularea riscului dacƒÉ ai suficiente date.
        RƒÉspunde √Æn rom√¢nƒÉ, concis (max 2 propozi»õii).
        """
        
        # Ob»õine rƒÉspuns de la AI
        ai_response = self.ai.generate(ai_prompt, self.get_system_prompt())
        
        # DezactiveazƒÉ typing indicator
        st.session_state.typing_indicator = False
        
        return ai_response
    
    def get_system_prompt(self) -> str:
        """Prompt sistem ultra-√ÆmbunƒÉtƒÉ»õit pentru AI medical"""
        return """
        E»ôti EpiMind AI, un asistent medical specializat √Æn evaluarea riscului de infec»õii asociate asisten»õei medicale (IAAM).

        MISIUNEA TA:
        1. Colectezi date medicale prin conversa»õie naturalƒÉ √Æn rom√¢nƒÉ
        2. Extragi informa»õii relevante pentru calculul riscului IAAM
        3. Ghidezi utilizatorul sƒÉ furnizeze toate datele necesare
        4. E»ôti precis, profesional »ôi empatic

        DATE PRIORITARE PENTRU IAAM:
        - Timp spitalizare (>48h obligatoriu pentru IAAM)
        - Dispozitive invazive »ôi durata lor
        - Culturi microbiologice »ôi rezisten»õe
        - Parametri vitali »ôi scoruri clinice
        - Markeri inflamatori (CRP, PCT, leucocite)

        INSTRUC»öIUNI CONVERSA»öIE:
        - Pune √ÆntrebƒÉri clare, o datƒÉ
        - AdapteazƒÉ-te la nivelul utilizatorului
        - ConfirmƒÉ informa»õiile critice
        - SugereazƒÉ calculul c√¢nd ai date suficiente
        - RƒÉspunde DOAR √Æn rom√¢nƒÉ
        - Fii concis (max 2 propozi»õii)
        - Nu da diagnoza - doar colectezi date
        - Recunoa»ôte c√¢nd utilizatorul spune "internat de X ore/zile"

        EXEMPLE √éNTREBƒÇRI:
        - "De c√¢te ore/zile este pacientul internat?"
        - "Ce dispozitive invazive are? (CVC, ventila»õie, sondƒÉ urinarƒÉ)"
        - "Care sunt valorile pentru leucocite, CRP »ôi procalcitoninƒÉ?"
        - "Sunt culturi pozitive? Ce bacterie »ôi ce rezisten»õe?"
        """
    
    def _format_current_data(self) -> str:
        """FormateazƒÉ datele curente pentru AI"""
        data = st.session_state.patient_data
        formatted = []
        
        # Date esen»õiale
        if data.ore_spitalizare > 0:
            zile = data.ore_spitalizare / 24
            formatted.append(f"‚è∞ Spitalizare: {data.ore_spitalizare} ore ({zile:.1f} zile)")
        
        # Dispozitive
        devices = []
        for device in ["cateter_central", "ventilatie_mecanica", "sonda_urinara", "traheostomie", "drenaj", "peg"]:
            if getattr(data, device, False):
                days = getattr(data, f"{device}_days", 0)
                device_name = device.replace('_', ' ')
                if days > 0:
                    devices.append(f"{device_name} ({days} zile)")
                else:
                    devices.append(device_name)
        
        if devices:
            formatted.append(f"üîß Dispozitive: {', '.join(devices)}")
        
        # Laborator
        lab_values = []
        if data.leucocite != 7.0:
            lab_values.append(f"WBC: {data.leucocite}")
        if data.crp != 5.0:
            lab_values.append(f"CRP: {data.crp}")
        if data.procalcitonina != 0.1:
            lab_values.append(f"PCT: {data.procalcitonina}")
        
        if lab_values:
            formatted.append(f"üß™ Laborator: {', '.join(lab_values)}")
        
        # Parametri vitali
        vitals = []
        if data.temperatura != 36.5:
            vitals.append(f"T: {data.temperatura}¬∞C")
        if data.frecventa_cardiaca != 80:
            vitals.append(f"FC: {data.frecventa_cardiaca}")
        if data.tas != 120 or data.tad != 80:
            vitals.append(f"TA: {data.tas}/{data.tad}")
        
        if vitals:
            formatted.append(f"üíì Vitali: {', '.join(vitals)}")
        
        # Microbiologie
        if data.cultura_pozitiva:
            micro_info = f"CulturƒÉ pozitivƒÉ: {data.bacterie}"
            if data.rezistente:
                micro_info += f" ({', '.join(data.rezistente)})"
            formatted.append(f"ü¶† {micro_info}")
        
        return "\n".join(formatted) if formatted else "Nu sunt date specifice colectate."
    
    def _assess_data_completion(self) -> str:
        """EvalueazƒÉ completitudinea datelor"""
        data = st.session_state.patient_data
        progress = self.calculate_completion_progress()
        
        if progress >= 80:
            return "Date suficiente pentru calculul IAAM - sugereazƒÉ calcularea"
        elif progress >= 60:
            return "Date par»õiale - mai sunt necesare c√¢teva informa»õii"
        elif progress >= 40:
            return "Date de bazƒÉ colectate - continuƒÉ cu detaliile"
        else:
            return "Date insuficiente - solicitƒÉ informa»õii esen»õiale"
    
    def calculate_and_display_risk(self) -> bool:
        """CalculeazƒÉ »ôi afi»ôeazƒÉ riscul IAAM cu interfa»õƒÉ √ÆmbunƒÉtƒÉ»õitƒÉ"""
        try:
            data = st.session_state.patient_data
            
            # VerificƒÉ dacƒÉ sunt date suficiente
            if data.ore_spitalizare < 48:
                st.warning("‚ö†Ô∏è Riscul IAAM se evalueazƒÉ doar pentru pacien»õii cu >48h de spitalizare.")
                return False
            
            # CalculeazƒÉ riscul
            risk_result = self.predictor.calculate_iaam_risk(data)
            
            if not risk_result:
                st.error("‚ùå Nu s-a putut calcula riscul. VerificƒÉ datele introduse.")
                return False
            
            # Afi»ôeazƒÉ rezultatul cu design √ÆmbunƒÉtƒÉ»õit
            self._display_risk_result(risk_result, data)
            
            # AdaugƒÉ mesaj √Æn chat
            risk_level = risk_result.get('nivel_risc', 'Necunoscut')
            score = risk_result.get('scor_total', 0)
            
            st.session_state.messages.append({
                "role": "system",
                "content": f"‚úÖ Calculul IAAM completat: Risc {risk_level} (Scor: {score})"
            })
            
            return True
            
        except Exception as e:
            logger.error(f"Error calculating IAAM risk: {e}")
            st.error(f"‚ùå Eroare la calculul riscului: {str(e)}")
            return False
    
    def _display_risk_result(self, risk_result: Dict, data: PatientData):
        """Afi»ôeazƒÉ rezultatul riscului cu design ultra-modern"""
        nivel_risc = risk_result.get('nivel_risc', 'Necunoscut')
        scor_total = risk_result.get('scor_total', 0)
        componente = risk_result.get('componente', {})
        recomandari = risk_result.get('recomandari', [])
        
        # DeterminƒÉ clasa CSS pentru risc
        if nivel_risc == "CRITIC":
            risk_class = "risk-critical"
        elif nivel_risc == "RIDICAT":
            risk_class = "risk-high"
        elif nivel_risc == "MODERAT":
            risk_class = "risk-moderate"
        else:
            risk_class = "risk-low"
        
        # Afi»ôeazƒÉ rezultatul principal
        st.markdown(f"""
        <div class="{risk_class}">
            <h2>üéØ REZULTAT EVALUARE IAAM</h2>
            <h1 style="font-size: 3rem; margin: 1rem 0;">RISC {nivel_risc}</h1>
            <h3>Scor Total: {scor_total} puncte</h3>
            <p style="font-size: 1.1rem; margin-top: 1rem;">
                Pacient: {data.ore_spitalizare/24:.1f} zile de spitalizare
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Afi»ôeazƒÉ componentele scorului
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìä Componente Scor")
            for componenta, scor in componente.items():
                if scor > 0:
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>{componenta}</h4>
                        <h2 style="color: var(--accent-blue);">{scor} puncte</h2>
                    </div>
                    """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("### üéØ RecomandƒÉri Clinice")
            for i, recomandare in enumerate(recomandari, 1):
                st.markdown(f"""
                <div class="data-card">
                    <strong>{i}.</strong> {recomandare}
                </div>
                """, unsafe_allow_html=True)
        
        # Grafic de risc
        self._create_risk_chart(componente, scor_total)
    
    def _create_risk_chart(self, componente: Dict, scor_total: int):
        """CreeazƒÉ grafic interactiv pentru componentele riscului"""
        if not componente:
            return
        
        # PregƒÉte»ôte datele pentru grafic
        labels = list(componente.keys())
        values = list(componente.values())
        
        # CreeazƒÉ grafic cu plotly
        fig = go.Figure()
        
        # AdaugƒÉ bara principalƒÉ
        fig.add_trace(go.Bar(
            x=labels,
            y=values,
            marker_color=['#00d4ff', '#00ff88', '#ffa726', '#ff4757', '#9f7aea'][:len(labels)],
            text=values,
            textposition='auto',
            name='Puncte Risc'
        ))
        
        # ConfigureazƒÉ layout-ul
        fig.update_layout(
            title=f"Componente Risc IAAM - Total: {scor_total} puncte",
            xaxis_title="Componente",
            yaxis_title="Puncte",
            template="plotly_dark",
            height=400,
            showlegend=False
        )
        
        st.plotly_chart(fig, use_container_width=True)

# Func»õie principalƒÉ √ÆmbunƒÉtƒÉ»õitƒÉ
def main():
    """Func»õia principalƒÉ ultra-√ÆmbunƒÉtƒÉ»õitƒÉ"""
    
    # Header principal
    st.markdown("""
    <div class="main-header">
        <h1>ü§ñ EpiMind AI - IAAM Predictor ULTRA</h1>
        <p>Asistent AI Ultra-Fluid pentru evaluarea riscului de infec»õii asociate asisten»õei medicale</p>
        <p><em>UMF "Grigore T. Popa" Ia»ôi - Version 5.0.0 ULTRA ENHANCED</em></p>
    </div>
    """, unsafe_allow_html=True)
    
    # Ini»õializeazƒÉ interfa»õa chat ultra-fluidƒÉ
    chat = UltraFluidChatInterface()
    
    # Layout principal √ÆmbunƒÉtƒÉ»õit
    col1, col2 = st.columns([3, 2])
    
    with col1:
        st.markdown("### üí¨ Chat Medical AI Ultra-Fluid")
        
        # Afi»ôeazƒÉ progresul completƒÉrii datelor
        chat.show_completion_indicator()
        
        # Container pentru chat
        chat_container = st.container()
        
        with chat_container:
            # Mesaj ini»õial √ÆmbunƒÉtƒÉ»õit
            if not st.session_state.messages:
                st.markdown("""
                <div class="message ai-message">
                    <strong>ü§ñ EpiMind AI Ultra:</strong><br>
                    Salut! Sunt asistentul tƒÉu AI ultra-√ÆmbunƒÉtƒÉ»õit pentru evaluarea riscului IAAM. 
                    Po»õi sƒÉ-mi spui despre pacient √Æn limba rom√¢nƒÉ, √Æn mod natural.
                    <br><br>
                    <strong>‚ú® Exemple noi de introducere date:</strong><br>
                    ‚Ä¢ <em>"Pacientul este internat de 99 ore, are CVC de 3 zile"</em><br>
                    ‚Ä¢ <em>"Internat de 5 zile, leucocite 15000, CRP 120, febrƒÉ 38.5¬∞C"</em><br>
                    ‚Ä¢ <em>"Spitalizat de 72 ore, ventila»õie mecanicƒÉ, culturƒÉ E.coli ESBL+"</em><br>
                    ‚Ä¢ <em>"De 4 zile √Æn spital, sondƒÉ urinarƒÉ, procalcitoninƒÉ 2.5"</em>
                </div>
                """, unsafe_allow_html=True)
            
            # Afi»ôeazƒÉ typing indicator
            chat.show_typing_indicator()
            
            # Afi»ôeazƒÉ toate mesajele
            for message in st.session_state.messages:
                if message["role"] == "user":
                    st.markdown(f"""
                    <div class="message user-message">
                        <strong>üë§ Tu:</strong><br>{message["content"]}
                    </div>
                    """, unsafe_allow_html=True)
                elif message["role"] == "assistant":
                    st.markdown(f"""
                    <div class="message ai-message">
                        <strong>ü§ñ EpiMind AI:</strong><br>{message["content"]}
                    </div>
                    """, unsafe_allow_html=True)
                else:  # system message
                    st.markdown(f"""
                    <div class="message system-message">
                        <strong>üéØ Sistem:</strong><br>{message["content"]}
                    </div>
                    """, unsafe_allow_html=True)
            
            # Afi»ôeazƒÉ feedback pentru ultima extrac»õie
            if st.session_state.last_extraction:
                chat.show_data_extraction_feedback(st.session_state.last_extraction)
        
        # Input pentru conversa»õie √ÆmbunƒÉtƒÉ»õit
        with st.form(key="chat_form", clear_on_submit=True):
            user_input = st.text_area(
                "Scrie aici informa»õiile despre pacient...",
                placeholder="Ex: Pacientul este internat de 99 ore, are CVC de 4 zile, leucocite 14000, CRP 150, culturƒÉ pozitivƒÉ Klebsiella ESBL+, temperaturƒÉ 38.8¬∞C...",
                height=120,
                key="user_input"
            )
            
            col_send, col_calc, col_clear, col_export = st.columns([2, 2, 1, 1])
            
            with col_send:
                submit_button = st.form_submit_button("üí¨ Trimite", type="primary")
            
            with col_calc:
                calc_button = st.form_submit_button("üéØ CalculeazƒÉ Risc", type="secondary")
            
            with col_clear:
                clear_button = st.form_submit_button("üóëÔ∏è Reset")
            
            with col_export:
                export_button = st.form_submit_button("üìÑ Export")
        
        # ProceseazƒÉ input-ul cu anima»õii
        if submit_button and user_input:
            # AdaugƒÉ mesajul utilizatorului
            st.session_state.messages.append({
                "role": "user",
                "content": user_input
            })
            
            # ActiveazƒÉ typing indicator
            st.session_state.typing_indicator = True
            
            # ProceseazƒÉ cu AI
            with st.spinner("ü§ñ AI proceseazƒÉ datele medicale ultra-rapid..."):
                time.sleep(0.5)  # SimuleazƒÉ procesarea pentru fluiditate
                ai_response = chat.process_user_input(user_input)
            
            # AdaugƒÉ rƒÉspunsul AI
            st.session_state.messages.append({
                "role": "assistant", 
                "content": ai_response
            })
            
            st.rerun()
        
        # CalculeazƒÉ riscul cu feedback √ÆmbunƒÉtƒÉ»õit
        if calc_button:
            with st.spinner("üßÆ Calculez riscul IAAM cu algoritmi avansa»õi..."):
                time.sleep(0.3)  # Pentru fluiditate
                success = chat.calculate_and_display_risk()
                if success:
                    st.success("‚úÖ Evaluarea IAAM ultra-precisƒÉ a fost completatƒÉ!")
                    # Afi»ôeazƒÉ notificare
                    st.markdown("""
                    <div class="notification">
                        üéâ Calculul IAAM finalizat cu succes!
                    </div>
                    """, unsafe_allow_html=True)
        
        # Reset chat cu confirmare
        if clear_button:
            st.session_state.messages = []
            st.session_state.patient_data = PatientData()
            st.session_state.last_extraction = {}
            st.session_state.data_completion_progress = 0
            st.success("üóëÔ∏è Chat resetat cu succes!")
            st.rerun()
        
        # Export rezultate
        if export_button:
            # ImplementeazƒÉ func»õia de export
            st.info("üìÑ Func»õia de export va fi disponibilƒÉ √Æn cur√¢nd!")
    
    with col2:
        st.markdown("### üìã Ghid Ultra-Complet")
        
        # Status AI √ÆmbunƒÉtƒÉ»õit
        ai_status = "üü¢ Online" if chat.ai.available else "üî¥ Offline (Fallback)"
        st.markdown(f"""
        <div class="data-card">
            <h4>ü§ñ Status AI</h4>
            <p class="{'status-online' if chat.ai.available else 'status-offline'}">{ai_status}</p>
            <small>Model: {chat.ai.model if chat.ai.available else 'Fallback AI'}</small>
        </div>
        """, unsafe_allow_html=True)
        
        # Checklist interactiv √ÆmbunƒÉtƒÉ»õit
        st.markdown("""
        <div class="data-card">
            <h4>‚úÖ Date Esen»õiale IAAM Ultra</h4>
            <ul>
                <li>‚è∞ <strong>Timp spitalizare</strong> - "internat de 99 ore" sau "de 4 zile"</li>
                <li>üîß <strong>Dispozitive invazive</strong> - CVC, ventila»õie, sondƒÉ urinarƒÉ + durata</li>
                <li>üß™ <strong>Analize laborator</strong> - WBC, CRP, PCT cu valori exacte</li>
                <li>ü¶† <strong>Culturi microbiologice</strong> - bacterii »ôi rezisten»õe (ESBL, MRSA)</li>
                <li>üíì <strong>Parametri vitali</strong> - TA, FC, temperaturƒÉ, FR</li>
                <li>üß† <strong>Scor Glasgow</strong> »ôi alte scoruri neurologice</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        # Exemple ultra-specifice
        st.markdown("""
        <div class="data-card">
            <h4>üí° Exemple Ultra-Specifice</h4>
            <p><strong>Spitalizare:</strong></p>
            <ul>
                <li>"internat de 99 ore"</li>
                <li>"spitalizat de 5 zile"</li>
                <li>"de 72 ore √Æn spital"</li>
                <li>"ziua 4 de internare"</li>
            </ul>
            <p><strong>Dispozitive:</strong></p>
            <ul>
                <li>"CVC de 3 zile"</li>
                <li>"ventila»õie mecanicƒÉ de 2 zile"</li>
                <li>"sondƒÉ urinarƒÉ de o sƒÉptƒÉm√¢nƒÉ"</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        # Bacterii »ôi rezisten»õe ultra-complete
        st.markdown("""
        <div class="data-card">
            <h4>ü¶† Microbiologie Ultra-CompletƒÉ</h4>
            <p><strong>Bacterii frecvente:</strong></p>
            <p>E.coli, Klebsiella pneumoniae, Pseudomonas aeruginosa, Acinetobacter baumannii, S.aureus, Enterococcus</p>
            <p><strong>Rezisten»õe critice:</strong></p>
            <p>ESBL+, MRSA, VRE, CRE, KPC, NDM, XDR, PDR, OXA, VIM, IMP</p>
        </div>
        """, unsafe_allow_html=True)
        
        # ScalƒÉ de risc vizualƒÉ
        st.markdown("""
        <div class="data-card">
            <h4>üìä ScalƒÉ Risc IAAM</h4>
            <div style="margin: 1rem 0;">
                <div style="background: linear-gradient(135deg, #66bb6a, #43a047); padding: 0.5rem; border-radius: 5px; margin: 2px 0; color: white; text-align: center;">
                    <strong>SCƒÇZUT (0-30)</strong> - Risc minimal
                </div>
                <div style="background: linear-gradient(135deg, #42a5f5, #478ed1); padding: 0.5rem; border-radius: 5px; margin: 2px 0; color: white; text-align: center;">
                    <strong>MODERAT (31-60)</strong> - Supraveghere
                </div>
                <div style="background: linear-gradient(135deg, #ffa726, #ff7043); padding: 0.5rem; border-radius: 5px; margin: 2px 0; color: white; text-align: center;">
                    <strong>RIDICAT (61-90)</strong> - MƒÉsuri active
                </div>
                <div style="background: linear-gradient(135deg, #ff4757, #c44569); padding: 0.5rem; border-radius: 5px; margin: 2px 0; color: white; text-align: center;">
                    <strong>CRITIC (>90)</strong> - Interven»õie urgentƒÉ
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
